import Head from 'next/head';
import Image from 'next/image';
import Link from "next/link";
import styles from '../styles/Home.module.css';
import client from "../apolloClient";
import { getProducts, getProduct } from '../apolloClient/gqlQuery';
import { useRouter } from 'next/router';



export default function SingleProduct({ product }) {

  const router = useRouter();

  return (
    <div className={styles.container}>
      <Head>
        <title>SingleProduct</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className={`${styles.title} py-5`}>
        <a className='block py-10'>{product?.name}</a>
      </h1>

      <div className='py-10'>
        <button onClick={()=> router.back()}>
          &larr;
          Back
        </button>
      </div>

      <main className={styles.main2}>
        <div className={`${styles.card2} text-center flex items-center justify-center`}>
          <div>
            <h2 className='py-4'>
              <span className='c-green'>Name:</span> 
              <div>{product?.name}</div>
            </h2>

            <h2 className='py-4'>
              <span className="c-green">Description:</span> 
              <div>{product?.description}</div>
            </h2>

            <p className='py-4'>
              <span className="c-green">Price:</span> 
              <div>#{product?.price}</div>
            </p>

            <p className='py-4'>
              <span className="c-green">Quantity In Stock:</span> 
              <div>{product?.quantityInStock}</div>
            </p>

            <p className='py-4'>
              Product Created At: 
              <div>{new Date(product?.createdAt).toLocaleString('en-US')}</div>
            </p>
          </div>
        </div>
      </main>
    </div>
  );
}


export async function getStaticPaths() {
  const { data } = await client.query({
    query: getProducts,
  });

  const paths = data.products.map((curr) => {
    return {
      params: {
        id: curr.id
      }
    };
  });

  return { paths, fallback: false };
}


export async function getStaticProps(context) {
  console.log('context', context);

  const { data } = await client.query({
    query: getProduct,
    variables: { id: context.params.id }
  });

  return { props: { product: data?.product || null } };
}